<?php
function get_products_by_parent_model( $parent_model_value ) {
    // Define query arguments to get products with specific parent_model attribute
    $args = array(
        'post_type' => 'product',
        'posts_per_page' => -1, // Get all products
        'meta_query' => array(
            array(
                'key' => 'parent_model',
                'value' => $parent_model_value,
                'compare' => '='
            )
        )
    );

    // Perform the query
    $query = new WP_Query( $args );

    // Initialize array to store product IDs
    $product_ids = array();

    if ( $query->have_posts() ) {
        while ( $query->have_posts() ) {
            $query->the_post();
            $product_ids[] = get_the_ID();
        }
    }

    // Restore original Post Data
    wp_reset_postdata();

    return $product_ids;
}

function get_product_attribute_value( $product_id, $attribute_slug ) {
    // Get the product object
    $product = wc_get_product( $product_id );

    if ( ! $product ) {
        return array( 'error' => 'Invalid product ID.' );
    }

    // Get the attributes of the product
    $attributes = $product->get_attributes();
    // print_r($attributes);

    // Initialize the array to store attribute values
    $attribute_values = array();
    $attribute_name = '';

    // Loop through each attribute
    foreach ( $attributes as $attribute ) {
        if ( $attribute->get_name() == $attribute_slug ) {
            $attribute_name = wc_attribute_label( $attribute->get_name() ); // Get attribute name

            // If the attribute is a taxonomy (i.e., a product attribute)
            if ( $attribute->is_taxonomy() ) {
                $terms = wp_get_post_terms( $product_id, $attribute->get_name() );
                foreach ( $terms as $term ) {
                    $attribute_values[] = $term->name;
                }
            } else {
                // For custom product attributes (not taxonomies)
                $attribute_values = array_merge( $attribute_values, $attribute->get_options() );
            }
            break;
        }
    }

    // Return the attribute values along with the name
    return array(
        'attribute_name' => $attribute_name,
        'attribute_slug' => $attribute_slug,
        'attribute_values' => $attribute_values
    );
}

function get_unique_attribute_values_by_parent_model( $parent_model_value, $attribute_slug ) {
    // Get product IDs with the specified parent_model
    $product_ids = get_products_by_parent_model( $parent_model_value );

    // Initialize array to store merged attribute values
    $merged_attribute_values = array();
    $attribute_info = array();

    // Loop through each product ID and get the attribute values
    foreach ( $product_ids as $product_id ) {
        $attribute_data = get_product_attribute_value( $product_id, $attribute_slug );
        $merged_attribute_values = array_merge( $merged_attribute_values, $attribute_data['attribute_values'] );
        $attribute_info = array(
            'attribute_name' => $attribute_data['attribute_name'],
            'attribute_slug' => $attribute_data['attribute_slug']
        );
    }

    // Remove duplicate values and reindex the array
    $unique_attribute_values = array_values( array_unique( $merged_attribute_values ) );

    // Add unique attribute values to attribute info
    $attribute_info['attribute_values'] = $unique_attribute_values;

    // Return the attribute info with unique attribute values
    return $attribute_info;
}

function findRange($array, $suffix, $decimal) {
    // Extract numeric values from the strings in the array
    $numericValues = array_map(function($value) {
        return floatval($value);
    }, $array);

    // Find the minimum and maximum values
    $minValue = min($numericValues);
    $maxValue = max($numericValues);
    
    if(!isset( $decimal )){
        $decimal= 2;
    }
    // Format the output
    $range = number_format($minValue, $decimal) . " - " . number_format($maxValue, $decimal) . $suffix;

    return $range;
}

// Usage example
$parent_model_value = 3366; // Replace with your parent model value
$attribute_slug = 'pa_engine-displacement'; // Replace with your attribute slug
$unique_attribute_values_info = get_unique_attribute_values_by_parent_model( $parent_model_value, $attribute_slug );
$values = $unique_attribute_values_info['attribute_values'];
// print_r($values);
//findRange($values, $suffix, $decimal)

echo findRange($values, " cc", 0);

